// SPDX-License-Identifier: MIT

pragma solidity ^0.8.4;


contract WhiteList {
    constructor() {}

    mapping (address => uint8) public whitelist;
    uint256 public WhitelistCount=0;

    event Log(string msg, address _id, uint count, uint addressvalue);
    
    function WhitelistAddresses(address[] memory _addresses) public {
        // onlyOwner
        uint256 count=0;
        for (uint i=0; i<_addresses.length; i++) {
            emit Log("in for loop", _addresses[i], count, whitelist[_addresses[i]]);
            if (whitelist[_addresses[i]] == 0) {
                whitelist[_addresses[i]]=1;
                count +=1;
            }   
            else     {
                emit Log("address is already whitelisted", _addresses[i], count, whitelist[_addresses[i]]);                
            }     
            
        }
        WhitelistCount += count;

    }


    function RemoveWhitelist(address[] memory _addresses) public {
        // onlyOwner
        uint256 count=0;
        for (uint i=0; i<_addresses.length; i++) {
            
            if (whitelist[_addresses[i]] !=0) {
                whitelist[_addresses[i]]=0;
                count +=1;
            }
            else     {
                emit Log("Adress is not already whitelisted", _addresses[i], count, whitelist[_addresses[i]]);                                
            }  
                       
        }        
        WhitelistCount -= count; 
        
    }

    function IsWhitelisted(address _address) public view returns (uint8) {                
        return whitelist[_address];        
    }

    
}
